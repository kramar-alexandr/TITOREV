external procedure HT2Per(Date, Date , var string);

SetLangMode(LangRussian,"RUS",0);

procedure FindTransactions(var record RcVc RepSpec,string recepy,var val qty, var val weight, time t1, time t2, var string client)
begin
  record ProdVc Prodr;
  row ProdVc Prodrw;
  boolean TrHs, testf,foundf;
  integer rwcnt,i;
  integer sign;
	vector val clInOut;
	array string 255 tags;
  
  Prodr.Recepy = recepy;

  TrHs = true;
  while (LoopKey("Recepy",Prodr,1,TrHs)) begin
    if (TrHs) then begin
      if (Prodr.Recepy <> recepy) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
		if (nonblank(RepSpec.f9)) then begin                 // by Ira
			if (Prodr.Person != RepSpec.f9) then begin			// by Ira
				testf = false;
			end else begin
				client = RepSpec.f9;
			end;
		end;
		// by Ira
      if (nonblank(RepSpec.f4)) then begin
        if (Prodr.FixAssCode <> RepSpec.f4) then begin
          testf = false;
        end;
      end;  
       if (DateInRange(Prodr.ProdDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;  
      if (Prodr.PRStatusFlag <> 3) then begin
        testf = false;
      end;
	  
	  // by Ira
	  sign = 1;
      if(testf)then begin
		rwcnt = matrowcnt(Prodr);
		for(i=0;i<rwcnt;i=i+1)begin
		    matrowget(Prodr,i,Prodrw);
			if(Prodrw.Item == Prodr.Recepy) then begin
				if(Prodrw.InQty > 0) then begin
					sign = -1;
				end;
			end;
		end;
	   end;
	  if(nonblank(RepSpec.f7))then begin
				if(testf)then begin
					foundf = false;
					rwcnt = matrowcnt(Prodr);
					for(i=0;i<rwcnt;i=i+1)begin
						matrowget(Prodr,i,Prodrw);
						if(Prodrw.Item==RepSpec.f7)then begin
							if(Prodrw.OutQty > 0) then begin
								RepSpec.vals2 = RepSpec.vals2 + Prodrw.ItemCost * Prodr.Qty * Prodrw.OutQty;
								RepSpec.vals1 = RepSpec.vals1 + Prodr.Qty * Prodrw.OutQty;
							end else begin
								RepSpec.vals2 = RepSpec.vals2 + Prodrw.ItemCost * Prodr.Qty * Prodrw.InQty;
								RepSpec.vals1 = RepSpec.vals1 + Prodr.Qty * Prodrw.InQty;
							end;
							foundf = true;
						end;
					end;
				end;
				testf = foundf;
      end;
      
     if (testf) then begin
       if (nonblank(RepSpec.f5)) and (nonblank(RepSpec.f6)) then begin
         testf = false;
         if (t1 < t2) then begin
           if (t1 <= Prodr.StartTime) and (t2 >= Prodr.StartTime) then begin
             testf = true;
           end;
         end;
         if (t2 < t1) then begin
           if ((t1 >= Prodr.StartTime) and (t2 >= Prodr.StartTime)) or (t1 <= Prodr.StartTime) then begin
             testf = true;
             if (Prodr.ProdDate == RepSpec.sEndDate) and (Prodr.StartTime > t2) then begin
               testf = false;
             end;
             if (Prodr.ProdDate == RepSpec.sStartDate) and (Prodr.StartTime < t2) then begin
               testf = false;
             end;  
           end;
         end;
       end;
       if (testf) then begin
				RepSpec.vals0 = RepSpec.vals0 + Prodrw.InQty*Prodr.Qty - Prodrw.OutQty*Prodr.Qty;
				qty  = qty + Prodr.Qty * sign;  // by Ira
				weight = weight + Prodr.TotOutWeight;
				clInOut[Prodr.Person] = clInOut[Prodr.Person] + Prodr.Qty;
				// if (RepSpec.vals0 > 0 and nonblank(Prodr.Person) and !SetInSet(Prodr.Person,client)) then begin
					// if (nonblank(client)) then begin client = client & ","; end;
					// client = client & Prodr.Person;
				// end;
       end;
      end;
    end;  
  end;
	GetVectorTags(clInOut,tags);
	for (i=0;i<tags.length;i=i+1) begin
		if (clInOut[tags[i]] > 0 and !SetInSet(tags[i],client)) then begin
			if (nonblank(client)) then begin client = client & ","; end;
			client = client & Prodr.Person;
		end;
	end;
  return;
end; 

global
procedure ProdStatRn(record RcVc RepSpec)
begin
  record RecVc Recr;
  record INVc INr;
  boolean TrHs, testf;
  val qty, weight, sum;
  val tqty, tweight,totitemval;
  string 255 tstr;
  integer rw,rwcnt,i;
  string 255 client;

  Time t1,t2,t3;
  t1 = StringToTime(RepSpec.f5);
  t2 = StringToTime(RepSpec.f6);
  rw =1;
  StartReportJob(USetStr(15150));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.f5)) and (nonblank(RepSpec.f6)) then begin
    tstr = USetStr(15151) & t1;
    Header(rw,tstr,1);
    rw = rw +1 ;
    
    tstr = USetStr(15152) & t2;
    Header(rw,tstr,1);
    rw = rw +1 ;
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr = USetStr(15153) & RepSpec.f2;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f4)) then begin
    tstr = USetStr(15154) & RepSpec.f4;
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  StartFormat(15);
  OutString(0,0,USetStr(15155),false);
  OutString(80,0,USetStr(15156),false);
  OutString(100,0,USetStr(15157),false);
  OutString(340,0,"Сотрудник",false);        // by Ira
  OutString(400,0,USetStr(15158),true);
  if (nonblank(RepSpec.f7)) then begin
	sum = 0;
	 OutString(440,0,"Цена",true);
	 OutString(1,0,"Сумма",true);
  end else begin
	OutString(1,0,USetStr(15159),true);
  end;
  EndFormat;
  Gray_Divider(0,1);
  TrHs = true;
  Recr.Code = RepSpec.f2;
  while (LoopMain(Recr,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2 <> Recr.Code) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (testf) then begin
        qty = 0;
        weight = 0;
        RepSpec.vals0 = blankval;
        RepSpec.vals1 = blankval;
				RepSpec.vals2 = blankval;
        FindTransactions(RepSpec,Recr.Code,qty,weight,t1,t2,client);
        if (qty <> 0) then begin
          StartFormat(15);
          OutString(0,0,Recr.Code,false);
          INr.Code = Recr.Code;
          if (ReadFirstMain(INr,1,true)) then begin
            OutString(80,0,INr.Unittext,false);
            OutString(100,0,INr.Unittext2,false);
          end;
          OutString(100,0,Recr.Comment,false);
			
		  OutString(340,0,client,false);                      // by Ira
		  OutVal(400,0,qty,M40Val,true);
          if(nonblank(RepSpec.f7))then begin
   //       	OutString(300,0,RepSpec.f7,false);
    //      	OutVal(430,0,RepSpec.vals0,M40Val,true);
				OutVal(440,0,RepSpec.vals2/RepSpec.vals1,M45Val,true);
				OutVal(1,0,RepSpec.vals2,M45Val,true);
				sum = sum + RepSpec.vals2;
				totitemval = totitemval + RepSpec.vals0;
          end else begin
			OutVal(1,0,weight,M4Val,true);
		  end;
          
          
          EndFormat;
          tqty = tqty + qty;
          tweight = tweight + weight;
        end;
      end;
    end;
   
  end;
  Gray_Divider(0,1);
  if(nonblank(RepSpec.f7)) then begin
   StartFormat(15);
    OutString(370,0,USetStr(15160) & " " & RepSpec.f7,true);
	OutVal(400,0,totitemval,M40Val,true);
	OutString(430,0,"Cума",true);
	OutVal(480,0,sum,M45Val,true);
	EndFormat;
	StartFormat(15);
  OutString(370,0,USetStr(15161),true);
	OutVal(400,0,tweight,M40Val,true);
   EndFormat;
  end else begin
  StartFormat(15);
  OutString(400,0,USetStr(15160),true);
  OutVal(1,0,tqty,M40Val,true);
  EndFormat;
  StartFormat(15);
  OutString(400,0,USetStr(15161),true);
  OutVal(1,0,tweight,M40Val,true);
  EndFormat;
	end;
	/*
  if(nonblank(RepSpec.f7))then begin
  	StartFormat(15);
		OutString(400,0,USetStr(15160) & " " & RepSpec.f7,true);
		OutVal(1,0,totitemval,M40Val,true);
		EndFormat;
  end;
  */
  EndJob;
  Return;
end;